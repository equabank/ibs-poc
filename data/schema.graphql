# source: https://api.graph.cool/relay/v1/cj7w1nh7n02c20147sn4t37fu
# timestamp: Fri Oct 06 2017 15:31:30 GMT+0200 (Central Europe Daylight Time)

type Account implements Node {
  amount: Float!
  blocked: Float!
  currency: Currency!
  id: ID!
  name: String!
  paymentOrders(filter: PaymentOrderFilter, orderBy: PaymentOrderOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PaymentOrderConnection
  type: AccountType!
}

# A connection to a list of items.
type AccountConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [AccountEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type AccountEdge {
  # The item at the end of the edge.
  node: Account!

  # A cursor for use in pagination.
  cursor: String!
}

input AccountFilter {
  # Logical AND on all given filters.
  AND: [AccountFilter!]

  # Logical OR on all given filters.
  OR: [AccountFilter!]
  amount: Float

  # All values that are not equal to given value.
  amount_not: Float

  # All values that are contained in given list.
  amount_in: [Float!]

  # All values that are not contained in given list.
  amount_not_in: [Float!]

  # All values less than the given value.
  amount_lt: Float

  # All values less than or equal the given value.
  amount_lte: Float

  # All values greater than the given value.
  amount_gt: Float

  # All values greater than or equal the given value.
  amount_gte: Float
  blocked: Float

  # All values that are not equal to given value.
  blocked_not: Float

  # All values that are contained in given list.
  blocked_in: [Float!]

  # All values that are not contained in given list.
  blocked_not_in: [Float!]

  # All values less than the given value.
  blocked_lt: Float

  # All values less than or equal the given value.
  blocked_lte: Float

  # All values greater than the given value.
  blocked_gt: Float

  # All values greater than or equal the given value.
  blocked_gte: Float
  currency: Currency

  # All values that are not equal to given value.
  currency_not: Currency

  # All values that are contained in given list.
  currency_in: [Currency!]

  # All values that are not contained in given list.
  currency_not_in: [Currency!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  type: AccountType

  # All values that are not equal to given value.
  type_not: AccountType

  # All values that are contained in given list.
  type_in: [AccountType!]

  # All values that are not contained in given list.
  type_not_in: [AccountType!]
  paymentOrders_every: PaymentOrderFilter
  paymentOrders_some: PaymentOrderFilter
  paymentOrders_none: PaymentOrderFilter
}

enum AccountOrderBy {
  amount_ASC
  amount_DESC
  blocked_ASC
  blocked_DESC
  currency_ASC
  currency_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  type_ASC
  type_DESC
}

input AccountpaymentOrdersPaymentOrder {
  amount: Float!
  payeeAccount: String!
  recipientAccount: String!
  type: String!
  variableSymbol: String!
}

enum AccountType {
  Current
  Saving
}

type AddToPaymentOrderOnAccountPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentOrdersPaymentOrder: PaymentOrder
  accountAccount: Account
  paymentOrdersPaymentOrderEdge: PaymentOrderEdge
  accountAccountEdge: AccountEdge
}

input AddToPaymentOrderOnAccountPaymentOrderInput {
  accountAccountId: ID!
  paymentOrdersPaymentOrderId: ID!
  clientMutationId: String!
}

input AUTH_PROVIDER_EMAIL {
  email: String!
  password: String!
}

input AuthProviderSignupData {
  email: AUTH_PROVIDER_EMAIL
}

input CreateAccount {
  amount: Float!
  blocked: Float!
  currency: Currency!
  name: String!
  type: AccountType!
  paymentOrdersIds: [ID!]
  paymentOrders: [AccountpaymentOrdersPaymentOrder!]
}

input CreateAccountInput {
  amount: Float!
  blocked: Float!
  currency: Currency!
  name: String!
  type: AccountType!
  paymentOrdersIds: [ID!]
  paymentOrders: [AccountpaymentOrdersPaymentOrder!]
  clientMutationId: String!
}

type CreateAccountPayload {
  viewer: Viewer!
  clientMutationId: String!
  account: Account
  edge: AccountEdge
}

input CreateFile {
  name: String!
}

input CreateFileInput {
  name: String!
  clientMutationId: String!
}

type CreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input CreatePaymentOrder {
  amount: Float!
  payeeAccount: String!
  recipientAccount: String!
  type: String!
  variableSymbol: String!
  accountId: ID
  account: PaymentOrderaccountAccount
}

input CreatePaymentOrderInput {
  amount: Float!
  payeeAccount: String!
  recipientAccount: String!
  type: String!
  variableSymbol: String!
  accountId: ID
  account: PaymentOrderaccountAccount
  clientMutationId: String!
}

type CreatePaymentOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentOrder: PaymentOrder
  edge: PaymentOrderEdge
  account: Account
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type CreateUserPayload {
  user: User
  clientMutationId: String
  viewer: Viewer!
}

enum Currency {
  CZK
  EUR
  USD
}

scalar DateTime

input DeleteAccountInput {
  id: ID!
  clientMutationId: String!
}

type DeleteAccountPayload {
  viewer: Viewer!
  clientMutationId: String!
  account: Account
  edge: AccountEdge
  deletedId: ID
}

input DeleteFileInput {
  id: ID!
  clientMutationId: String!
}

type DeleteFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
  deletedId: ID
}

input DeletePaymentOrderInput {
  id: ID!
  clientMutationId: String!
}

type DeletePaymentOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentOrder: PaymentOrder
  edge: PaymentOrderEdge
  account: Account
  deletedId: ID
}

input DeleteUserInput {
  id: ID!
  clientMutationId: String!
}

type DeleteUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
  deletedId: ID
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

# A connection to a list of items.
type FileConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [FileEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type FileEdge {
  # The item at the end of the edge.
  node: File!

  # A cursor for use in pagination.
  cursor: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountPayload
  createFile(input: CreateFileInput!): CreateFilePayload
  createPaymentOrder(input: CreatePaymentOrderInput!): CreatePaymentOrderPayload
  updateAccount(input: UpdateAccountInput!): UpdateAccountPayload
  updateFile(input: UpdateFileInput!): UpdateFilePayload
  updatePaymentOrder(input: UpdatePaymentOrderInput!): UpdatePaymentOrderPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateOrCreateAccount(input: UpdateOrCreateAccountInput!): UpdateOrCreateAccountPayload
  updateOrCreateFile(input: UpdateOrCreateFileInput!): UpdateOrCreateFilePayload
  updateOrCreatePaymentOrder(input: UpdateOrCreatePaymentOrderInput!): UpdateOrCreatePaymentOrderPayload
  updateOrCreateUser(input: UpdateOrCreateUserInput!): UpdateOrCreateUserPayload
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload
  deleteFile(input: DeleteFileInput!): DeleteFilePayload
  deletePaymentOrder(input: DeletePaymentOrderInput!): DeletePaymentOrderPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  addToPaymentOrderOnAccount(input: AddToPaymentOrderOnAccountPaymentOrderInput!): AddToPaymentOrderOnAccountPayload
  removeFromPaymentOrderOnAccount(input: RemoveFromPaymentOrderOnAccountPaymentOrderInput!): RemoveFromPaymentOrderOnAccountPayload
  signinUser(input: SigninUserInput!): SigninPayload!
  createUser(input: SignupUserInput!): CreateUserPayload!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type PaymentOrder implements Node {
  account(filter: AccountFilter): Account
  amount: Float!
  createdAt: DateTime!
  id: ID!
  payeeAccount: String!
  recipientAccount: String!
  type: String!
  variableSymbol: String!
}

input PaymentOrderaccountAccount {
  amount: Float!
  blocked: Float!
  currency: Currency!
  name: String!
  type: AccountType!
  paymentOrdersIds: [ID!]
  paymentOrders: [AccountpaymentOrdersPaymentOrder!]
}

# A connection to a list of items.
type PaymentOrderConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [PaymentOrderEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type PaymentOrderEdge {
  # The item at the end of the edge.
  node: PaymentOrder!

  # A cursor for use in pagination.
  cursor: String!
}

input PaymentOrderFilter {
  # Logical AND on all given filters.
  AND: [PaymentOrderFilter!]

  # Logical OR on all given filters.
  OR: [PaymentOrderFilter!]
  amount: Float

  # All values that are not equal to given value.
  amount_not: Float

  # All values that are contained in given list.
  amount_in: [Float!]

  # All values that are not contained in given list.
  amount_not_in: [Float!]

  # All values less than the given value.
  amount_lt: Float

  # All values less than or equal the given value.
  amount_lte: Float

  # All values greater than the given value.
  amount_gt: Float

  # All values greater than or equal the given value.
  amount_gte: Float
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  payeeAccount: String

  # All values that are not equal to given value.
  payeeAccount_not: String

  # All values that are contained in given list.
  payeeAccount_in: [String!]

  # All values that are not contained in given list.
  payeeAccount_not_in: [String!]

  # All values less than the given value.
  payeeAccount_lt: String

  # All values less than or equal the given value.
  payeeAccount_lte: String

  # All values greater than the given value.
  payeeAccount_gt: String

  # All values greater than or equal the given value.
  payeeAccount_gte: String

  # All values containing the given string.
  payeeAccount_contains: String

  # All values not containing the given string.
  payeeAccount_not_contains: String

  # All values starting with the given string.
  payeeAccount_starts_with: String

  # All values not starting with the given string.
  payeeAccount_not_starts_with: String

  # All values ending with the given string.
  payeeAccount_ends_with: String

  # All values not ending with the given string.
  payeeAccount_not_ends_with: String
  recipientAccount: String

  # All values that are not equal to given value.
  recipientAccount_not: String

  # All values that are contained in given list.
  recipientAccount_in: [String!]

  # All values that are not contained in given list.
  recipientAccount_not_in: [String!]

  # All values less than the given value.
  recipientAccount_lt: String

  # All values less than or equal the given value.
  recipientAccount_lte: String

  # All values greater than the given value.
  recipientAccount_gt: String

  # All values greater than or equal the given value.
  recipientAccount_gte: String

  # All values containing the given string.
  recipientAccount_contains: String

  # All values not containing the given string.
  recipientAccount_not_contains: String

  # All values starting with the given string.
  recipientAccount_starts_with: String

  # All values not starting with the given string.
  recipientAccount_not_starts_with: String

  # All values ending with the given string.
  recipientAccount_ends_with: String

  # All values not ending with the given string.
  recipientAccount_not_ends_with: String
  type: String

  # All values that are not equal to given value.
  type_not: String

  # All values that are contained in given list.
  type_in: [String!]

  # All values that are not contained in given list.
  type_not_in: [String!]

  # All values less than the given value.
  type_lt: String

  # All values less than or equal the given value.
  type_lte: String

  # All values greater than the given value.
  type_gt: String

  # All values greater than or equal the given value.
  type_gte: String

  # All values containing the given string.
  type_contains: String

  # All values not containing the given string.
  type_not_contains: String

  # All values starting with the given string.
  type_starts_with: String

  # All values not starting with the given string.
  type_not_starts_with: String

  # All values ending with the given string.
  type_ends_with: String

  # All values not ending with the given string.
  type_not_ends_with: String
  variableSymbol: String

  # All values that are not equal to given value.
  variableSymbol_not: String

  # All values that are contained in given list.
  variableSymbol_in: [String!]

  # All values that are not contained in given list.
  variableSymbol_not_in: [String!]

  # All values less than the given value.
  variableSymbol_lt: String

  # All values less than or equal the given value.
  variableSymbol_lte: String

  # All values greater than the given value.
  variableSymbol_gt: String

  # All values greater than or equal the given value.
  variableSymbol_gte: String

  # All values containing the given string.
  variableSymbol_contains: String

  # All values not containing the given string.
  variableSymbol_not_contains: String

  # All values starting with the given string.
  variableSymbol_starts_with: String

  # All values not starting with the given string.
  variableSymbol_not_starts_with: String

  # All values ending with the given string.
  variableSymbol_ends_with: String

  # All values not ending with the given string.
  variableSymbol_not_ends_with: String
  account: AccountFilter
}

enum PaymentOrderOrderBy {
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  payeeAccount_ASC
  payeeAccount_DESC
  recipientAccount_ASC
  recipientAccount_DESC
  type_ASC
  type_DESC
  variableSymbol_ASC
  variableSymbol_DESC
}

type Query {
  viewer: Viewer!

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type RemoveFromPaymentOrderOnAccountPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentOrdersPaymentOrder: PaymentOrder
  accountAccount: Account
  paymentOrdersPaymentOrderEdge: PaymentOrderEdge
  accountAccountEdge: AccountEdge
}

input RemoveFromPaymentOrderOnAccountPaymentOrderInput {
  accountAccountId: ID!
  paymentOrdersPaymentOrderId: ID!
  clientMutationId: String!
}

# If authentication was successful the payload contains the user and a token. If unsuccessful this payload is null.
type SigninPayload {
  token: String
  user: User
  clientMutationId: String
  viewer: Viewer!
}

input SigninUserInput {
  email: AUTH_PROVIDER_EMAIL
  clientMutationId: String!
}

input SignupUserInput {
  clientMutationId: String!
  authProvider: AuthProviderSignupData!
}

input UpdateAccount {
  amount: Float
  blocked: Float
  currency: Currency
  id: ID!
  name: String
  type: AccountType
  paymentOrdersIds: [ID!]
  paymentOrders: [AccountpaymentOrdersPaymentOrder!]
}

input UpdateAccountInput {
  amount: Float
  blocked: Float
  currency: Currency
  id: ID!
  name: String
  type: AccountType
  paymentOrdersIds: [ID!]
  paymentOrders: [AccountpaymentOrdersPaymentOrder!]
  clientMutationId: String!
}

type UpdateAccountPayload {
  viewer: Viewer!
  clientMutationId: String!
  account: Account
  edge: AccountEdge
}

input UpdateFile {
  id: ID!
  name: String
}

input UpdateFileInput {
  id: ID!
  name: String
  clientMutationId: String!
}

type UpdateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreateAccountInput {
  update: UpdateAccount!
  create: CreateAccount!
  clientMutationId: String!
}

type UpdateOrCreateAccountPayload {
  viewer: Viewer!
  clientMutationId: String!
  account: Account
  edge: AccountEdge
}

input UpdateOrCreateFileInput {
  update: UpdateFile!
  create: CreateFile!
  clientMutationId: String!
}

type UpdateOrCreateFilePayload {
  viewer: Viewer!
  clientMutationId: String!
  file: File
  edge: FileEdge
}

input UpdateOrCreatePaymentOrderInput {
  update: UpdatePaymentOrder!
  create: CreatePaymentOrder!
  clientMutationId: String!
}

type UpdateOrCreatePaymentOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentOrder: PaymentOrder
  edge: PaymentOrderEdge
  account: Account
}

input UpdateOrCreateUserInput {
  update: UpdateUser!
  clientMutationId: String!
}

type UpdateOrCreateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

input UpdatePaymentOrder {
  amount: Float
  id: ID!
  payeeAccount: String
  recipientAccount: String
  type: String
  variableSymbol: String
  accountId: ID
  account: PaymentOrderaccountAccount
}

input UpdatePaymentOrderInput {
  amount: Float
  id: ID!
  payeeAccount: String
  recipientAccount: String
  type: String
  variableSymbol: String
  accountId: ID
  account: PaymentOrderaccountAccount
  clientMutationId: String!
}

type UpdatePaymentOrderPayload {
  viewer: Viewer!
  clientMutationId: String!
  paymentOrder: PaymentOrder
  edge: PaymentOrderEdge
  account: Account
}

input UpdateUser {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  clientMutationId: String!
}

type UpdateUserPayload {
  viewer: Viewer!
  clientMutationId: String!
  user: User
  edge: UserEdge
}

type User implements Node {
  createdAt: DateTime!
  email: String
  id: ID!
  password: String
  updatedAt: DateTime!
}

# A connection to a list of items.
type UserConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [UserEdge]

  # Count of filtered result set without considering pagination arguments
  count: Int!
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge.
  node: User!

  # A cursor for use in pagination.
  cursor: String!
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# This is the famous Relay viewer object
type Viewer {
  allAccounts(filter: AccountFilter, orderBy: AccountOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): AccountConnection!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  allPaymentOrders(filter: PaymentOrderFilter, orderBy: PaymentOrderOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): PaymentOrderConnection!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  user: User
  Account(id: ID): Account
  File(id: ID, secret: String, url: String): File
  PaymentOrder(id: ID): PaymentOrder
  User(email: String, id: ID): User
  id: ID!
}
